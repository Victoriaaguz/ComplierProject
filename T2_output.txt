Token: SEPARATOR, Lexeme: $
Token: IDENTIFIER, Lexeme: function
Token: IDENTIFIER, Lexeme: convertx
Token: IDENTIFIER, Lexeme: (fahr
Token: IDENTIFIER, Lexeme: integer)
Token: IDENTIFIER, Lexeme: {
Token: KEYWORD, Lexeme: return
Token: INTEGER, Lexeme: 5
Token: OPERATOR, Lexeme: *
Token: IDENTIFIER, Lexeme: (fahr
Token: OPERATOR, Lexeme: -
Token: INTEGER, Lexeme: 32)
Token: OPERATOR, Lexeme: /
Token: INTEGER, Lexeme: 9;
Token: IDENTIFIER, Lexeme: }
Token: SEPARATOR, Lexeme: $
Token: IDENTIFIER, Lexeme: integer
Token: IDENTIFIER, Lexeme: low
Token: IDENTIFIER, Lexeme: ,
Token: IDENTIFIER, Lexeme: high
Token: IDENTIFIER, Lexeme: ,
Token: IDENTIFIER, Lexeme: step
Token: IDENTIFIER, Lexeme: ;
Token: SEPARATOR, Lexeme: $
Token: IDENTIFIER, Lexeme: scan
Token: IDENTIFIER, Lexeme: (low
Token: IDENTIFIER, Lexeme: ,
Token: IDENTIFIER, Lexeme: high
Token: IDENTIFIER, Lexeme: ,
Token: IDENTIFIER, Lexeme: step)
Token: IDENTIFIER, Lexeme: ;
Token: KEYWORD, Lexeme: while
Token: IDENTIFIER, Lexeme: (low
Token: OPERATOR, Lexeme: <
Token: OPERATOR, Lexeme: =
Token: IDENTIFIER, Lexeme: high)
Token: IDENTIFIER, Lexeme: {print
Token: IDENTIFIER, Lexeme: (low)
Token: IDENTIFIER, Lexeme: ;
Token: IDENTIFIER, Lexeme: print
Token: IDENTIFIER, Lexeme: (convertx
Token: IDENTIFIER, Lexeme: (low))
Token: IDENTIFIER, Lexeme: ;
Token: IDENTIFIER, Lexeme: low
Token: OPERATOR, Lexeme: =
Token: IDENTIFIER, Lexeme: low
Token: OPERATOR, Lexeme: +
Token: IDENTIFIER, Lexeme: step
Token: IDENTIFIER, Lexeme: ;
Token: IDENTIFIER, Lexeme: }
Token: IDENTIFIER, Lexeme: endwhile
Token: SEPARATOR, Lexeme: $
