Token: KEYWORD, Lexeme: import
Token: IDENTIFIER, Lexeme: random
Token: KEYWORD, Lexeme: import
Token: IDENTIFIER, Lexeme: time
Token: KEYWORD, Lexeme: def
Token: IDENTIFIER, Lexeme: generate_random_code
Token: SEPARATOR, Lexeme: (
Token: IDENTIFIER, Lexeme: lines
Token: SEPARATOR, Lexeme: )
Token: SEPARATOR, Lexeme: :
Token: IDENTIFIER, Lexeme: code
Token: OPERATOR, Lexeme: =
Token: OPERATOR, Lexeme: []
Token: KEYWORD, Lexeme: for
Token: IDENTIFIER, Lexeme: _
Token: KEYWORD, Lexeme: in
Token: IDENTIFIER, Lexeme: range
Token: SEPARATOR, Lexeme: (
Token: IDENTIFIER, Lexeme: lines
Token: SEPARATOR, Lexeme: )
Token: SEPARATOR, Lexeme: :
Token: IDENTIFIER, Lexeme: line
Token: OPERATOR, Lexeme: =
Token: IDENTIFIER, Lexeme: generate_random_line
Token: SEPARATOR, Lexeme: (
Token: SEPARATOR, Lexeme: )
Token: IDENTIFIER, Lexeme: code
Token: IDENTIFIER, Lexeme: .
Token: IDENTIFIER, Lexeme: cappend
Token: SEPARATOR, Lexeme: (
Token: IDENTIFIER, Lexeme: line
Token: SEPARATOR, Lexeme: )
Token: KEYWORD, Lexeme: return
Token: IDENTIFIER, Lexeme: code
Token: KEYWORD, Lexeme: def
Token: IDENTIFIER, Lexeme: generate_random_line
Token: SEPARATOR, Lexeme: (
Token: SEPARATOR, Lexeme: )
Token: SEPARATOR, Lexeme: :
Token: IDENTIFIER, Lexeme: line
Token: OPERATOR, Lexeme: =
Token: IDENTIFIER, Lexeme: blank
Token: IDENTIFIER, Lexeme: num_operations
Token: OPERATOR, Lexeme: =
Token: IDENTIFIER, Lexeme: random.randint
Token: SEPARATOR, Lexeme: (
Token: INTEGER, Lexeme: 1
Token: SEPARATOR, Lexeme: ,
Token: INTEGER, Lexeme: 3
Token: SEPARATOR, Lexeme: )
Token: KEYWORD, Lexeme: for
Token: IDENTIFIER, Lexeme: _
Token: KEYWORD, Lexeme: in
Token: IDENTIFIER, Lexeme: range
Token: SEPARATOR, Lexeme: (
Token: IDENTIFIER, Lexeme: num_operations
Token: SEPARATOR, Lexeme: )
Token: SEPARATOR, Lexeme: :
Token: IDENTIFIER, Lexeme: operation
Token: OPERATOR, Lexeme: =
Token: IDENTIFIER, Lexeme: random.choice
Token: SEPARATOR, Lexeme: (
Token: IDENTIFIER, Lexeme: [
Token: ILLEGAL, Lexeme: "
Token: KEYWORD, Lexeme: if
Token: ILLEGAL, Lexeme: "
Token: SEPARATOR, Lexeme: ,
Token: ILLEGAL, Lexeme: "
Token: KEYWORD, Lexeme: elif
Token: ILLEGAL, Lexeme: "
Token: SEPARATOR, Lexeme: ,
Token: ILLEGAL, Lexeme: "
Token: KEYWORD, Lexeme: else
Token: ILLEGAL, Lexeme: "
Token: SEPARATOR, Lexeme: ,
Token: ILLEGAL, Lexeme: "
Token: KEYWORD, Lexeme: for
Token: ILLEGAL, Lexeme: "
Token: SEPARATOR, Lexeme: ,
Token: ILLEGAL, Lexeme: "
Token: KEYWORD, Lexeme: while
Token: ILLEGAL, Lexeme: "
Token: SEPARATOR, Lexeme: ,
Token: ILLEGAL, Lexeme: "
Token: KEYWORD, Lexeme: def
Token: ILLEGAL, Lexeme: "
Token: SEPARATOR, Lexeme: ,
Token: ILLEGAL, Lexeme: "
Token: KEYWORD, Lexeme: return
Token: ILLEGAL, Lexeme: "
Token: SEPARATOR, Lexeme: ,
Token: ILLEGAL, Lexeme: "
Token: IDENTIFIER, Lexeme: print
Token: ILLEGAL, Lexeme: "
Token: ILLEGAL, Lexeme: ]
Token: SEPARATOR, Lexeme: )
Token: IDENTIFIER, Lexeme: line
Token: OPERATOR, Lexeme: +
Token: OPERATOR, Lexeme: =
Token: IDENTIFIER, Lexeme: operation
Token: OPERATOR, Lexeme: +
Token: ILLEGAL, Lexeme: "
Token: ILLEGAL, Lexeme: "
Token: KEYWORD, Lexeme: if
Token: IDENTIFIER, Lexeme: operation
Token: KEYWORD, Lexeme: in
Token: IDENTIFIER, Lexeme: [
Token: ILLEGAL, Lexeme: "
Token: KEYWORD, Lexeme: if
Token: ILLEGAL, Lexeme: "
Token: SEPARATOR, Lexeme: ,
Token: ILLEGAL, Lexeme: "
Token: KEYWORD, Lexeme: elif
Token: ILLEGAL, Lexeme: "
Token: SEPARATOR, Lexeme: ,
Token: ILLEGAL, Lexeme: "
Token: KEYWORD, Lexeme: else
Token: ILLEGAL, Lexeme: "
Token: SEPARATOR, Lexeme: ,
Token: ILLEGAL, Lexeme: "
Token: KEYWORD, Lexeme: for
Token: ILLEGAL, Lexeme: "
Token: SEPARATOR, Lexeme: ,
Token: ILLEGAL, Lexeme: "
Token: KEYWORD, Lexeme: while
Token: ILLEGAL, Lexeme: "
Token: SEPARATOR, Lexeme: ,
Token: ILLEGAL, Lexeme: "
Token: KEYWORD, Lexeme: def
Token: ILLEGAL, Lexeme: "
Token: ILLEGAL, Lexeme: ]
Token: SEPARATOR, Lexeme: :
Token: IDENTIFIER, Lexeme: line
Token: OPERATOR, Lexeme: +
Token: OPERATOR, Lexeme: =
Token: IDENTIFIER, Lexeme: generate_random_condition
Token: SEPARATOR, Lexeme: (
Token: SEPARATOR, Lexeme: )
Token: OPERATOR, Lexeme: +
Token: ILLEGAL, Lexeme: "
Token: SEPARATOR, Lexeme: :
Token: ILLEGAL, Lexeme: "
Token: KEYWORD, Lexeme: elif
Token: IDENTIFIER, Lexeme: operation
Token: OPERATOR, Lexeme: =
Token: OPERATOR, Lexeme: =
Token: ILLEGAL, Lexeme: "
Token: IDENTIFIER, Lexeme: print
Token: ILLEGAL, Lexeme: "
Token: SEPARATOR, Lexeme: :
Token: IDENTIFIER, Lexeme: line
Token: OPERATOR, Lexeme: +
Token: OPERATOR, Lexeme: =
Token: IDENTIFIER, Lexeme: generate_random_string
Token: SEPARATOR, Lexeme: (
Token: SEPARATOR, Lexeme: )
Token: OPERATOR, Lexeme: +
Token: ILLEGAL, Lexeme: "
Token: ILLEGAL, Lexeme: "
Token: KEYWORD, Lexeme: elif
Token: IDENTIFIER, Lexeme: operation
Token: OPERATOR, Lexeme: =
Token: ILLEGAL, Lexeme: "
Token: KEYWORD, Lexeme: return
Token: ILLEGAL, Lexeme: "
Token: SEPARATOR, Lexeme: :
Token: IDENTIFIER, Lexeme: line
Token: OPERATOR, Lexeme: +
Token: OPERATOR, Lexeme: =
Token: IDENTIFIER, Lexeme: generate_random_number
Token: SEPARATOR, Lexeme: (
Token: SEPARATOR, Lexeme: )
Token: OPERATOR, Lexeme: +
Token: ILLEGAL, Lexeme: "
Token: ILLEGAL, Lexeme: "
Token: KEYWORD, Lexeme: return
Token: IDENTIFIER, Lexeme: line
Token: IDENTIFIER, Lexeme: print
Token: REAL, Lexeme: 3.14
Token: SEPARATOR, Lexeme: $
Token: INTEGER, Lexeme: 2
Token: OPERATOR, Lexeme: /
Token: INTEGER, Lexeme: 0
Token: OPERATOR, Lexeme: =
Token: IDENTIFIER, Lexeme: number
Token: SEPARATOR, Lexeme: $
Token: SEPARATOR, Lexeme: $
