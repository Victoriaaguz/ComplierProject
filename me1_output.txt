Token: ILLEGAL, Lexeme: ï»¿
Token: OPERATOR, Lexeme: =
Token: OPERATOR, Lexeme: !=
Token: OPERATOR, Lexeme: >
Token: OPERATOR, Lexeme: <
Token: OPERATOR, Lexeme: <=
Token: OPERATOR, Lexeme: =
Token: OPERATOR, Lexeme: >
Token: OPERATOR, Lexeme: +
Token: OPERATOR, Lexeme: -
Token: OPERATOR, Lexeme: *
Token: OPERATOR, Lexeme: /
Token: OPERATOR, Lexeme: ==
Token: OPERATOR, Lexeme: +
Token: OPERATOR, Lexeme: -
Token: OPERATOR, Lexeme: *
Token: OPERATOR, Lexeme: /
Token: SEPARATOR, Lexeme: $
Token: SEPARATOR, Lexeme: {
Token: SEPARATOR, Lexeme: }
Token: SEPARATOR, Lexeme: ;
Token: SEPARATOR, Lexeme: ,
Token: SEPARATOR, Lexeme: (
Token: SEPARATOR, Lexeme: )
Token: OPERATOR, Lexeme: =
Token: SEPARATOR, Lexeme: )
Token: SEPARATOR, Lexeme: (
Token: IDENTIFIER, Lexeme: integer
Token: IDENTIFIER, Lexeme: boolean
Token: IDENTIFIER, Lexeme: real
Token: SEPARATOR, Lexeme: {
Token: SEPARATOR, Lexeme: }
Token: SEPARATOR, Lexeme: ;
Token: SEPARATOR, Lexeme: ,
Token: KEYWORD, Lexeme: if
Token: KEYWORD, Lexeme: else
Token: KEYWORD, Lexeme: endif
Token: KEYWORD, Lexeme: return
Token: KEYWORD, Lexeme: scan
Token: KEYWORD, Lexeme: while
Token: KEYWORD, Lexeme: endwhile
Token: KEYWORD, Lexeme: true
Token: KEYWORD, Lexeme: false
Token: INTEGER, Lexeme: 1
Token: INTEGER, Lexeme: 1000
Token: INTEGER, Lexeme: 99
Token: INTEGER, Lexeme: 00000000000000
Token: REAL, Lexeme: 234.567
Token: REAL, Lexeme: 9.000001
Token: REAL, Lexeme: 000.00
Token: IDENTIFIER, Lexeme: z12_d_
Token: IDENTIFIER, Lexeme: Zzzz
Token: IDENTIFIER, Lexeme: a1z4r
Token: IDENTIFIER, Lexeme: zbc12__x
Token: IDENTIFIER, Lexeme: x
Token: ILLEGAL, Lexeme: #
Token: ILLEGAL, Lexeme: _
Token: ILLEGAL, Lexeme: 23rty
Token: REAL, Lexeme: 000.
Token: ILLEGAL, Lexeme: .123
